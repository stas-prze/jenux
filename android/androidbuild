#!/bin/zsh
#Android Installer
#Copyright (C) 2015-2019  Daniel Nash
                                                                                                                                                                          
    #This program is free software; you can redistribute it and/or modify
    #it under the terms of the GNU General Public License as published by
    #the Free Software Foundation; either version 2 of the License, or
    #(at your option) any later version.
                                                                                                                                                                          
    #This program is distributed in the hope that it will be useful,
    #but WITHOUT ANY WARRANTY; without even the implied warranty of
    #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    #GNU General Public License for more details.
                                                                                                                                                                          
    #You should have received a copy of the GNU General Public License along
    #with this program; if not, write to the Free Software Foundation, Inc.,
  #  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
function createmenu
{
export menudesc=`stty -a|grep rows|cut -f 2-6 -d \;|cut -f 3,5,8 -d \ |tr \; \ |sed s/"  "/" "/|sed s/"  "/" "/`
cat $1|tail -n 1 >/tmp/itemlist
export numitems=`cat /tmp/itemlist|wc -l`
export linecounter=1
while true;do
cat /tmp/itemlist|head -n $linecounter|tail -n 1 >>/tmp/items
export linecounter=$(($linecounter+1))
if [ $linecounter -gt $numitems ];then
break
else
continue
fi
done
echo whiptail --menu --nocancel --notags `cat $1|head -n 1` `echo -n $menudesc` `cat $1|tail -n 1`>/tmp/menu
chmod 755 /tmp/menu
/tmp/menu 2>/tmp/choice
export choice=`cat /tmp/choice|cut -f 2 -d \;`
cat /tmp/itemlist|sed s/"\"\ /\\n/g"|sed "s/\"//g" > /tmp/items
export testnum=`cat /tmp/items|grep -nw $choice |cut -f 1 -d \:`
export itemname=`cat /tmp/items|head -n $(($testnum+1))|tail -n 1`
rm /tmp/choice /tmp/menu /tmp/itemlist /tmp/items /tmp/dynmenu /tmp/menutitle
clear
}
function createdynamicmenu
{
$@>/tmp/itemlist
export numitems=`cat /tmp/itemlist|wc -l`
export counter=1
if [ -f /tmp/menutitle ];then
export title=`cat /tmp/menutitle|head -n 1`
else
export title="$numitems items available"
fi
echo \"$title\" > /tmp/dynmenu
while true;do
export ltr=`cat /tmp/itemlist|head -n $counter|tail -n 1|cut -c 1`
export item=`cat /tmp/itemlist|head -n $counter|tail -n 1`
echo -n \" >> /tmp/dynmenu
if [ $ltr = \" ];then
export ltr="|"
fi
echo -n $ltr\;$counter >> /tmp/dynmenu
echo -n \"\  >>/tmp/dynmenu
echo -n \" >> /tmp/dynmenu
if echo $item|grep -q \";then
export item=`echo $item|sed "s/\"/\|/g"`
fi
echo -n $item >> /tmp/dynmenu
echo -n \"\  >>/tmp/dynmenu
export counter=$(($counter+1))
if [ $counter -gt $numitems ];then
break
else
continue
fi
done
createmenu /tmp/dynmenu
}
echo "\"select a version of android to install\"">/tmp/vermenu
echo -n "\"c\" \"current 10.0\" ">>/tmp/vermenu
echo -n "\"l\" \"legacy 7.1.2, oldest, but best hardware compatibility\" ">>/tmp/vermenu
echo -n "\"p\" \"Pie 9.0\" ">>/tmp/vermenu
echo -n "\"s\" \"stable 8.1.0\" ">>/tmp/vermenu
echo -n "\"t\" \"Android TV, based on android 7.1.2\" ">>/tmp/vermenu
createmenu /tmp/vermenu
case "$choice" in
c)
export baseurl="https://sourceforge.net/projects/blissos-dev/files/yantra/"
export url=`lynx --dump -listonly $baseurl|grep iso|head -n 1|cut -f 3 -d \  `
export presetname=current
;;
l)
export presetname=legacy
;;
p)
export baseurl=https://sourceforge.net/projects/blissos-x86/files/Official/bleeding_edge/Generic%20builds%20-%20Pie
export url=`lynx --dump -listonly $baseurl|grep iso|head -n 1|cut -f 3 -d \  `
export presetname=pie
;;
s)
export presetname=stable
;;
t)
export presetname=tv
;;
esac
if [ -z $url ];then
export url="https://nashcentral.duckdns.org/autobuildres/android/$presetname.iso"
fi
echo "on the next screen, you will be asked to select a hard disk to install to. Please note: If you have other opperating systems on your computer that you would like to multi boot with, please resize their partitions manually and create enough free space for android. As a minimum, android system and recovery data will require at least 16 GB excluding data. While you can go as low as 8 and have the OS successfully boot, you will have around 2 GB for all of your apps, music, videos, and other data, which might not be optimal. WARNING!!!!! IMPROPER PARTITIONING WILL LEAD TO LOSS OF DATA!!!!! Whenever making changes to partition tables, please make sure you back up all data on the disk in case of issues. In the Jenux ISO Main Menu, an option to run the Clonezilla backup program is provided for automated backup and restores of hard disks."
read confirm
while true;do
if [ -z $disk ];then
sh -c 'echo -n "print devices"|parted|grep /dev|grep \(>/tmp/disk;cat /tmp/disk|tr \  \:>/tmp/disks;rm /tmp/disk'
createdynamicmenu cat /tmp/disks
export disk=`echo $itemname|cut -f 1 -d \:|cut -f 2 -d \"`
unset choice
clear
echo "\"How would you like to partition your disk?\"">/tmp/partmenu
echo -n "\"e\" \"erase disk and install android, will use all space on disk\" \"m\" \"manually, prints instructions and drops to gdisk partitioning console\"" >> /tmp/partmenu
createmenu /tmp/partmenu
case "$choice" in
e)
parted $disk --script mklabel gpt
sgdisk -o -n 1:0:4096:ef00 -n 2:4097:500M:ef00 -n 3:1024001:-1s -c 2:EFI -c 3:linux $disk
sgdisk -t 1:ef02 $disk
if dmidecode|grep Manufacturer|head -n 1|cut -f 2 -d \:|grep -i hp;then
if [ -d /sys/firmware/efi/efivars ];then
sleep .01
else
parted $disk --script disk_set pmbr_boot on > /dev/null
fi
fi
;;
m)
echo "partitioning instructions:"
echo "To create new partitions, type n at the command prompt. To change a partition's name after creation, type c."
echo "create at least 3 partitions. The following layout is suggested:"
echo "partition 1: from sector 0 to 2M, type code ef02, for BIOS Boot, name none"
echo "partition 2, from 2M to 502M, for uefi boot and recovery support files, type code ef00, name EFI"
echo "partition 3, from 502M to however large you want your android installation to be, default type code 8300, name linux."
echo "feel free to make changes to this suggested layout, but the type codes and partition names must be as stated in the instructions for a successful installation."
echo "if you made a mestake and want to start from scratch, type o, y, enter to destroy the in memory copy of the partition table. Don't forget to type w enter y enter to write your new partition table to the disk."
gdisk $disk 
;;
esac
partprobe
sleep 1.5
if [ -e /dev/disk/by-partlabel/EFI ];then
export boot="/dev/disk/by-partlabel/EFI"
else
clear
echo "Your EFI System Partition which will hold the kernel and bootloader cannot automatically be detected. Please select it from the following list."
read var
export entries=`lsblk -nro name,size $disk|wc -l`
lsblk -nro name,size $disk|head -n $entries|tail -n $(($entries-1)) > /tmp/vols
createdynamicmenu cat /tmp/vols
export bootdev=`echo $itemname|cut -f 2 -d \"|cut -f 1 -d \  `
export boot=/dev/$bootdev
sgdisk $disk -c=$choice:EFI
fi
if [ -e /dev/disk/by-partlabel/linux ];then
export root="/dev/disk/by-partlabel/linux"
else
clear
echo "Your root device cannot automatically be detected. Please select it from the following list."
read var
export entries=`lsblk -nro name,size $disk|wc -l`
lsblk -nro name,size $disk|head -n $entries|tail -n $(($entries-1)) > /tmp/vols
createdynamicmenu cat /tmp/vols
export rootdev=`echo $itemname|cut -f 2 -d \"|cut -f 1 -d \  `
export root=/dev/$rootdev
sgdisk $disk -c=$choice:linux
fi
else
break
fi
done
if blkid $boot|grep -q vfat;then
echo backing up ESP
mount $boot /boot
cd /boot
tar --exclude vmlinuz-linux --exclude initramfs-linux.img --exclude initramfs-linux-fallback.img -czf ~/esp.tar.gz .
rm -rf /boot/*
cd $OLDPWD
umount /boot
else
echo "boot partition is not an ESP, formatting boot partition for android use... "
mkfs.vfat -n EFI $boot
fi
if blkid $root|grep -q ext4;then
sleep .01
else
echo "Root partition is not compatible with android, formatting main android partition... "
mkfs.ext4 -L android-x86 $root
fi
echo "mounting main system partition..."
mount $root /mnt
cd /mnt
echo $disk > /mnt/disk
mkdir boot
mount $boot boot
if [ -f ~/esp.tar.gz ];then
echo restoring old ESP content to /boot.old
mv ~/esp.tar.gz /mnt/boot.old.tar.gz
mkdir /mnt/boot.old
cd /mnt/boot.old
tar -xf /mnt/boot.old.tar.gz
cd $OLDPWD
fi
genfstab /mnt > /tmp/fstab
echo android-x86-recovery > /tmp/hostname
echo preparing for recovery environment install
if cat ~/.zlogin|grep -iq pacman-key;then
sleep .01
else
curl -s -o /etc/pacman.conf "https://nashcentral.duckdns.org/autobuildres/linux/pacman.conf"
systemctl stop pacman-init
umount /etc/pacman.d/gnupg
cd
curl -s -O https://blackarch.org/strap.sh
chmod 755 strap.sh
./strap.sh
rm strap.sh
pacman --needed --noconfirm -Sy archlinux-keyring blackarch-keyring
pacman-key --init
pacman-key --populate archlinux blackarch
pacman-key --refresh
cd $OLDPWD
curl -s -o /etc/pacman.conf "https://nashcentral.duckdns.org/autobuildres/linux/pacman.conf"
fi
echo "Downloading $presetname android-x86 iso"
while true;do
if curl -Lo android.iso $url;then
break
else
continue
fi
done
echo "Downloading data for recovery mode... "
while true;do
if curl -O "https://nashcentral.duckdns.org/autobuildres/android/recenvinstall";then
break
else
continue
fi
done
chmod 700 recenvinstall
while true;do
if ./recenvinstall;then
break
else
continue
fi
done
while true;do
if curl "https://nashcentral.duckdns.org/autobuildres/android/recovery.tar.gz"|tar -xz;then
break
else
continue
fi
done
mv /tmp/fstab /mnt/etc/fstab
mv /tmp/hostname /mnt/etc/hostname
mkdir -p /mnt/var/lib/alsa
alsactl -f /mnt/var/lib/alsa/asound.state store
while true;do
beep -f 1000 -l 500
clear
chroot /mnt /etc/postinstall.sh
if [ -f /mnt/etc/postinstall.sh ];then
continue
else
break
fi
done
rm ./recenvinstall
cd
echo "syncing disks..."
sync
echo "android has been installed! press enter to reboot your device or control c to drop to shell."
read var
reboot -f
